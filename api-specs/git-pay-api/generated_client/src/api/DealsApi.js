/**
 * GitPay API
 * Is developed as a part of gitpay.ru project by Microbo team 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: alexandrdavydenko@yandex.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DealInfo from '../model/DealInfo';

/**
* Deals service.
* @module api/DealsApi
* @version 0.0.1
*/
export default class DealsApi {

    /**
    * Constructs a new DealsApi. 
    * @alias module:api/DealsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acceptDeal operation.
     * @callback module:api/DealsApi~acceptDealCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept deal byt Payer
     * @param {String} platformDealId 
     * @param {module:api/DealsApi~acceptDealCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealInfo}
     */
    acceptDeal(platformDealId, callback) {
      let postBody = null;
      // verify the required parameter 'platformDealId' is set
      if (platformDealId === undefined || platformDealId === null) {
        throw new Error("Missing the required parameter 'platformDealId' when calling acceptDeal");
      }

      let pathParams = {
        'platformDealId': platformDealId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DealInfo;
      return this.apiClient.callApi(
        '/deals/{platformDealId}/accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addNewDeal operation.
     * @callback module:api/DealsApi~addNewDealCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DealInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new deal
     * @param {module:model/DealInfo} dealInfo 
     * @param {module:api/DealsApi~addNewDealCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DealInfo>}
     */
    addNewDeal(dealInfo, callback) {
      let postBody = dealInfo;
      // verify the required parameter 'dealInfo' is set
      if (dealInfo === undefined || dealInfo === null) {
        throw new Error("Missing the required parameter 'dealInfo' when calling addNewDeal");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [DealInfo];
      return this.apiClient.callApi(
        '/deals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelDeal operation.
     * @callback module:api/DealsApi~cancelDealCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel deal, either by Payer or by Benificiar
     * @param {String} platformDealId 
     * @param {module:api/DealsApi~cancelDealCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealInfo}
     */
    cancelDeal(platformDealId, callback) {
      let postBody = null;
      // verify the required parameter 'platformDealId' is set
      if (platformDealId === undefined || platformDealId === null) {
        throw new Error("Missing the required parameter 'platformDealId' when calling cancelDeal");
      }

      let pathParams = {
        'platformDealId': platformDealId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DealInfo;
      return this.apiClient.callApi(
        '/deals/{platformDealId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commitDeal operation.
     * @callback module:api/DealsApi~commitDealCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commit & pay for the deal
     * @param {String} platformDealId 
     * @param {module:api/DealsApi~commitDealCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealInfo}
     */
    commitDeal(platformDealId, callback) {
      let postBody = null;
      // verify the required parameter 'platformDealId' is set
      if (platformDealId === undefined || platformDealId === null) {
        throw new Error("Missing the required parameter 'platformDealId' when calling commitDeal");
      }

      let pathParams = {
        'platformDealId': platformDealId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DealInfo;
      return this.apiClient.callApi(
        '/deals/{platformDealId}/commit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeal operation.
     * @callback module:api/DealsApi~deleteDealCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove deal, e.g. if its not accepted yet or just orphan
     * @param {String} platformDealId 
     * @param {module:api/DealsApi~deleteDealCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealInfo}
     */
    deleteDeal(platformDealId, callback) {
      let postBody = null;
      // verify the required parameter 'platformDealId' is set
      if (platformDealId === undefined || platformDealId === null) {
        throw new Error("Missing the required parameter 'platformDealId' when calling deleteDeal");
      }

      let pathParams = {
        'platformDealId': platformDealId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DealInfo;
      return this.apiClient.callApi(
        '/deals/{platformDealId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDealDetails operation.
     * @callback module:api/DealsApi~getDealDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retriee deal details & status
     * @param {String} platformDealId 
     * @param {module:api/DealsApi~getDealDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealInfo}
     */
    getDealDetails(platformDealId, callback) {
      let postBody = null;
      // verify the required parameter 'platformDealId' is set
      if (platformDealId === undefined || platformDealId === null) {
        throw new Error("Missing the required parameter 'platformDealId' when calling getDealDetails");
      }

      let pathParams = {
        'platformDealId': platformDealId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DealInfo;
      return this.apiClient.callApi(
        '/deals/{platformDealId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegisteredDeals operation.
     * @callback module:api/DealsApi~getRegisteredDealsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Array>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of registered deals
     * @param {module:api/DealsApi~getRegisteredDealsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Array>}
     */
    getRegisteredDeals(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Array];
      return this.apiClient.callApi(
        '/deals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
